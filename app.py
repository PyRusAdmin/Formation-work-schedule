# -*- coding: utf-8 -*-
import json
from datetime import date, datetime
from typing import List

from fastapi import FastAPI, Request
from fastapi import HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger
from pydantic import BaseModel

from database import initialize_db, ReportCard10, ReportCard11

app = FastAPI()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount('/static', StaticFiles(directory='static'), name='static')
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Jinja2Templates
templates = Jinja2Templates(directory="templates")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initialize_db()


# –ú–æ–¥–µ–ª–∏ Pydantic
class EmployeeCreate(BaseModel):
    service_number: str
    vacation_start: date
    vacation_end: date


class EmployeeResponse(BaseModel):
    id: int
    service_number: str
    vacation_start: date
    vacation_end: date


@app.get("/data_10")
async def get_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –æ–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞"""
    employees = []
    for emp in ReportCard10.select():
        employees.append({
            "–ö–°–ü": emp.ksp,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": emp.name,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": emp.category,
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": emp.profession,
            "–°—Ç–∞—Ç—É—Å": emp.status,
            "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ": emp.abbreviation,
            "–†–∞–∑—Ä—è–¥": emp.grade,
            "–¢–∞–±": emp.tab,
            "–§–ò–û": emp.fio,
            "–¢–∞—Ä–∏—Ñ": emp.salary,
            "days": json.loads(emp.days)
        })
    return employees


@app.post("/data_10")
async def save_data(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞"""
    new_data = await request.json()
    now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    for row in new_data:
        emp, created = ReportCard10.get_or_create(tab=row["–¢–∞–±"])
        emp.ksp = row["–ö–°–ü"]
        emp.name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        emp.category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        emp.profession = row["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è"]
        emp.status = row["–°—Ç–∞—Ç—É—Å"]
        emp.abbreviation = row.get("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ", "")
        emp.grade = row.get("–†–∞–∑—Ä—è–¥", "")
        emp.fio = row["–§–ò–û"]
        emp.salary = row["–¢–∞—Ä–∏—Ñ"]
        emp.days = json.dumps(row["days"], ensure_ascii=False)
        emp.date_change = now  # üïí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        emp.save()
    return {"status": "ok"}


@app.get("/data_11")
async def get_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –Ω–æ—è–±—Ä—å 2025 –≥–æ–¥–∞"""
    employees = []
    for emp in ReportCard11.select():
        employees.append({
            "–ö–°–ü": emp.ksp,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": emp.name,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": emp.category,
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": emp.profession,
            "–°—Ç–∞—Ç—É—Å": emp.status,
            "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ": emp.abbreviation,
            "–†–∞–∑—Ä—è–¥": emp.grade,
            "–¢–∞–±": emp.tab,
            "–§–ò–û": emp.fio,
            "–¢–∞—Ä–∏—Ñ": emp.salary,
            "days": json.loads(emp.days)
        })
    return employees


@app.post("/data_11")
async def save_data(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ—è–±—Ä—å 2025 –≥–æ–¥–∞"""
    new_data = await request.json()
    now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    for row in new_data:
        emp, created = ReportCard11.get_or_create(tab=row["–¢–∞–±"])
        emp.ksp = row["–ö–°–ü"]
        emp.name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        emp.category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        emp.profession = row["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è"]
        emp.status = row["–°—Ç–∞—Ç—É—Å"]
        emp.abbreviation = row.get("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ", "")
        emp.grade = row.get("–†–∞–∑—Ä—è–¥", "")
        emp.fio = row["–§–ò–û"]
        emp.salary = row["–¢–∞—Ä–∏—Ñ"]
        emp.days = json.dumps(row["days"], ensure_ascii=False)
        emp.date_change = now  # üïí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        emp.save()
    return {"status": "ok"}


@app.get("/data_12")
async def get_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞"""
    employees = []
    for emp in ReportCard11.select():
        employees.append({
            "–ö–°–ü": emp.ksp,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": emp.name,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": emp.category,
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": emp.profession,
            "–°—Ç–∞—Ç—É—Å": emp.status,
            "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ": emp.abbreviation,
            "–†–∞–∑—Ä—è–¥": emp.grade,
            "–¢–∞–±": emp.tab,
            "–§–ò–û": emp.fio,
            "–¢–∞—Ä–∏—Ñ": emp.salary,
            "days": json.loads(emp.days)
        })
    return employees


@app.post("/data_12")
async def save_data(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞"""
    new_data = await request.json()
    now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    for row in new_data:
        emp, created = ReportCard11.get_or_create(tab=row["–¢–∞–±"])
        emp.ksp = row["–ö–°–ü"]
        emp.name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        emp.category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        emp.profession = row["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è"]
        emp.status = row["–°—Ç–∞—Ç—É—Å"]
        emp.abbreviation = row.get("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ", "")
        emp.grade = row.get("–†–∞–∑—Ä—è–¥", "")
        emp.fio = row["–§–ò–û"]
        emp.salary = row["–¢–∞—Ä–∏—Ñ"]
        emp.days = json.dumps(row["days"], ensure_ascii=False)
        emp.date_change = now  # üïí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        emp.save()
    return {"status": "ok"}


@app.get("/report_card_10", response_model=None)
async def report_card_10(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/10/report_card_10.html", {"request": request})


@app.get("/report_card_11", response_model=None)
async def report_card_11(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–æ—è–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/11/report_card_11.html", {"request": request})


@app.get("/report_card_12", response_model=None)
async def report_card_12(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/12/report_card_12.html", {"request": request})


@app.get("/list_employees")
async def list_employees(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    try:
        employees = []
        for emp in ReportCard10.select():
            date_change = emp.date_change.strftime("%d.%m.%Y %H:%M") if emp.date_change else "‚Äî"
            employees.append({
                "ksp": emp.ksp,
                "name": emp.name,
                "category": emp.category,
                "profession": emp.profession,
                "status": emp.status,
                "abbreviation": emp.abbreviation,
                "grade": emp.grade,
                "tab": emp.tab,
                "fio": emp.fio,
                "salary": emp.salary,
                "date_change": date_change,
            })

        return templates.TemplateResponse(
            "list_employees.html",
            {"request": request, "employees": employees}
        )
    except Exception as e:
        logger.exception(e)
        return {"error": str(e)}


# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
@app.post("/employees/", response_model=EmployeeResponse)
async def create_employee(employee: EmployeeCreate):
    new_employee = ReportCard10.create(
        name=employee.service_number,
        vacation_start=employee.vacation_start,
        vacation_end=employee.vacation_end,
    )
    return EmployeeResponse(
        id=new_employee.id,
        service_number=new_employee.service_number,
        vacation_start=new_employee.vacation_start,
        vacation_end=new_employee.vacation_end,
    )


@app.get("/employees/", response_model=List[EmployeeResponse])
async def get_employees():
    employees = ReportCard10.select()
    return [
        EmployeeResponse(
            id=emp.id,
            service_number=emp.service_number,
            vacation_start=emp.vacation_start,
            vacation_end=emp.vacation_end,
        )
        for emp in employees
    ]


@app.get("/entering_vacations", response_model=None)
async def entering_vacations(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –æ—Ç–ø—É—Å–∫–æ–≤
    """
    return templates.TemplateResponse("entering_vacations.html", {"request": request})


@app.get("/calendar_2025", response_model=None)
async def calendar_2025(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è 2025 –≥–æ–¥–∞
    :param request: FastAPI request
    :return: templates.TemplateResponse
    """
    return templates.TemplateResponse("choosing_month.html", {"request": request})


@app.get("/forming_employee_report_card", response_model=None)
async def forming_employee_report_card(request: Request):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :param request: FastAPI request
    :return: templates.TemplateResponse
    """
    return templates.TemplateResponse("work_schedule/forming_employee_report_card.html", {"request": request})


# === –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (–Ω–æ—è–±—Ä—å 2025 ‚Üí ReportCard11) ===


@app.get("/api/employee/{tab}")
async def get_employee_by_tab(tab: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ –Ω–æ—è–±—Ä—è 2025 (ReportCard11)"""
    try:
        emp = ReportCard11.get(ReportCard11.tab == tab)
        return {
            "id": emp.id,
            "tab": emp.tab,
            "fio": emp.fio,
            "ksp": emp.ksp,
            "name": emp.name,
            "category": emp.category,
            "profession": emp.profession,
            "status": emp.status,
            "abbreviation": emp.abbreviation,
            "grade": emp.grade,
            "salary": emp.salary,
            "days": json.loads(emp.days)
        }
    except ReportCard11.DoesNotExist:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ—è–±—Ä–µ 2025")


@app.put("/api/employee/{tab}")
async def update_employee_days(tab: str, request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ days –∏ date_change)"""
    try:
        emp = ReportCard11.get(ReportCard11.tab == tab)
    except ReportCard11.DoesNotExist:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        data = await request.json()
        new_days = data.get("days")

        if not isinstance(new_days, list):
            raise HTTPException(status_code=400, detail="–ü–æ–ª–µ 'days' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")

        if len(new_days) != 30:
            raise HTTPException(status_code=400,
                                detail="–ù–æ—è–±—Ä—å 2025 –∏–º–µ–µ—Ç 30 –¥–Ω–µ–π. –ü–µ—Ä–µ–¥–∞–Ω–æ: {} –¥–Ω–µ–π".format(len(new_days)))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ days –∏ date_change
        emp.days = json.dumps(new_days, ensure_ascii=False)
        emp.date_change = datetime.now()
        emp.save()

        return {"status": "ok", "message": "–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"}
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    except Exception as e:
        logger.exception(e)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@app.get("/")
async def index(request: Request):
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —à–∞–±–ª–æ–Ω
    return templates.TemplateResponse("index.html", {"request": request})
