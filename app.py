# -*- coding: utf-8 -*-
import json
from datetime import date, datetime
from pathlib import Path
from typing import List

from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger
from pydantic import BaseModel

from database import initialize_db, ReportCard10

app = FastAPI()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount('/static', StaticFiles(directory='static'), name='static')
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Jinja2Templates
templates = Jinja2Templates(directory="templates")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initialize_db()


# –ú–æ–¥–µ–ª–∏ Pydantic
class EmployeeCreate(BaseModel):
    service_number: str
    vacation_start: date
    vacation_end: date


class EmployeeResponse(BaseModel):
    id: int
    service_number: str
    vacation_start: date
    vacation_end: date


DATA_FILE = Path("data/data.json")


@app.get("/data")
async def get_data():
    employees = []
    for emp in ReportCard10.select():
        employees.append({
            "–ö–°–ü": emp.ksp,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": emp.name,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": emp.category,
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": emp.profession,
            "–°—Ç–∞—Ç—É—Å": emp.status,
            "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ": emp.abbreviation,
            "–†–∞–∑—Ä—è–¥": emp.grade,
            "–¢–∞–±": emp.tab,
            "–§–ò–û": emp.fio,
            "–¢–∞—Ä–∏—Ñ": emp.salary,
            "days": json.loads(emp.days)
        })
    return employees


@app.post("/data")
async def save_data(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    new_data = await request.json()
    now = datetime.now()  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    for row in new_data:
        emp, created = ReportCard10.get_or_create(tab=row["–¢–∞–±"])
        emp.ksp = row["–ö–°–ü"]
        emp.name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        emp.category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        emp.profession = row["–ü—Ä–æ—Ñ–µ—Å—Å–∏—è"]
        emp.status = row["–°—Ç–∞—Ç—É—Å"]
        emp.abbreviation = row.get("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ", "")
        emp.grade = row.get("–†–∞–∑—Ä—è–¥", "")
        emp.fio = row["–§–ò–û"]
        emp.salary = row["–¢–∞—Ä–∏—Ñ"]
        emp.days = json.dumps(row["days"], ensure_ascii=False)
        emp.date_change = now  # üïí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        emp.save()
    return {"status": "ok"}


@app.get("/report_card_10", response_model=None)
async def report_card_10(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/10/report_card_10.html", {"request": request})


@app.get("/report_card_11", response_model=None)
async def report_card_11(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–æ—è–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/11/report_card_11.html", {"request": request})


@app.get("/report_card_12", response_model=None)
async def report_card_12(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞
    """
    return templates.TemplateResponse("work_schedule/2025/12/report_card_12.html", {"request": request})


@app.get("/list_employees")
async def list_employees(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    try:
        employees = []
        for emp in ReportCard10.select():
            date_change = emp.date_change.strftime("%d.%m.%Y %H:%M") if emp.date_change else "‚Äî"
            employees.append({
                "ksp": emp.ksp,
                "name": emp.name,
                "category": emp.category,
                "profession": emp.profession,
                "status": emp.status,
                "abbreviation": emp.abbreviation,
                "grade": emp.grade,
                "tab": emp.tab,
                "fio": emp.fio,
                "salary": emp.salary,
                "date_change": date_change,
            })

        return templates.TemplateResponse(
            "list_employees.html",
            {"request": request, "employees": employees}
        )
    except Exception as e:
        logger.exception(e)
        return {"error": str(e)}


# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
@app.post("/employees/", response_model=EmployeeResponse)
async def create_employee(employee: EmployeeCreate):
    new_employee = ReportCard10.create(
        name=employee.service_number,
        vacation_start=employee.vacation_start,
        vacation_end=employee.vacation_end,
    )
    return EmployeeResponse(
        id=new_employee.id,
        service_number=new_employee.service_number,
        vacation_start=new_employee.vacation_start,
        vacation_end=new_employee.vacation_end,
    )


@app.get("/employees/", response_model=List[EmployeeResponse])
async def get_employees():
    employees = ReportCard10.select()
    return [
        EmployeeResponse(
            id=emp.id,
            service_number=emp.service_number,
            vacation_start=emp.vacation_start,
            vacation_end=emp.vacation_end,
        )
        for emp in employees
    ]


@app.get("/entering_vacations", response_model=None)
async def entering_vacations(request: Request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –æ—Ç–ø—É—Å–∫–æ–≤
    """
    return templates.TemplateResponse("entering_vacations.html", {"request": request})


@app.get("/")
async def index(request: Request):
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —à–∞–±–ª–æ–Ω
    # writing_employee_database()
    return templates.TemplateResponse("index.html", {"request": request})
