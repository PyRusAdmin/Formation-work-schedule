from datetime import datetime

from peewee import SqliteDatabase, Model, CharField, DateField, TextField, DateTimeField

from utilities.work_with_excel import get_data_from_excel

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SqliteDatabase('data/vacations.db')


class BaseModel(Model):
    class Meta:
        database = db


class ReportCard10(BaseModel):
    """–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –æ–∫—Ç—è–±—Ä—å 2025"""
    ksp = CharField()
    name = CharField()
    category = CharField()
    profession = CharField()
    status = CharField()
    abbreviation = CharField(null=True)
    grade = CharField(null=True)
    tab = CharField()
    fio = CharField()
    salary = CharField()
    days = TextField()  # –•—Ä–∞–Ω–∏–º JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç
    date_change = DateTimeField(default=datetime.now)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üÜï –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞


class ReportCard11(BaseModel):
    """–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –Ω–æ—è–±—Ä—å 2025"""
    ksp = CharField()  # –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    name = CharField()  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    category = CharField()  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    profession = CharField()  # –î–æ–ª–∂–Ω–æ—Å—Ç—å
    status = CharField()  # –°—Ç–∞—Ç—É—Å
    abbreviation = CharField(null=True)  # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
    grade = CharField(null=True)  # –ö–ª–∞—Å—Å
    tab = CharField()  # –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    fio = CharField()  # –§–ò–û
    salary = CharField()  # –ó–∞—Ä–ø–ª–∞—Ç–∞
    days = TextField()  # –•—Ä–∞–Ω–∏–º JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç
    date_change = DateTimeField(default=datetime.now)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üÜï –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞


class ReportCard12(BaseModel):
    """–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2025"""
    ksp = CharField()
    name = CharField()
    category = CharField()
    profession = CharField()
    status = CharField()
    abbreviation = CharField(null=True)
    grade = CharField(null=True)
    tab = CharField()
    fio = CharField()
    salary = CharField()
    days = TextField()  # –•—Ä–∞–Ω–∏–º JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç
    date_change = DateTimeField(default=datetime.now)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üÜï –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞


class Employee(BaseModel):
    service_number = CharField()  # –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    vacation_start = DateField()  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
    vacation_end = DateField()  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞



def initialize_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""

    db.connect()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ dismissal_date –≤ —Ç–∞–±–ª–∏—Ü–µ datastaff
    # columns = [col.name for col in db.get_columns('datastaff')]
    # if 'dismissal_date' not in columns:
    #     db.execute_sql("ALTER TABLE datastaff ADD COLUMN dismissal_date DATE;")

    db.create_tables([Employee])
    db.create_tables([ReportCard10])  # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –æ–∫—Ç—è–±—Ä—å 2025
    db.create_tables([ReportCard11])  # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –Ω–æ—è–±—Ä—å 2025
    db.create_tables([ReportCard12])  # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2025
    # db.create_tables([DataStaff])


class DataStaff(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö"""
    service_number = CharField(unique=True)  # –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    person = CharField()  # –§–ò–û
    profession = CharField()  # –î–æ–ª–∂–Ω–æ—Å—Ç—å
    dismissal_date = DateField(null=True)  # üÜï –î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è


def writing_employee_database():
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
    data_list = get_data_from_excel()

    with db.atomic():
        for data in data_list:
            DataStaff.get_or_create(
                service_number=data[5],
                defaults={
                    "person": data[6],
                    "profession": data[3]
                }
            )
